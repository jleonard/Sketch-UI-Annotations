var library = {
   "alert":{
    "label" : "Alert",
    "css" : "*alert",
    "url" : "http://styleguide.etradecreative.com/components/alerts.html"
  },
  "filters":{
    "label" : "Filters",
    "css" : "*filters",
    "url" : "http://styleguide.etradecreative.com/components/filters.html"
  },
  "balance-summary":{
    "label" : "Balance Summary",
    "css" : "*balance-summary",
    "url" : "http://styleguide.etradecreative.com/patterns/balance-summary.html"
  },
  "alert-panel":{
    "label" : "Alert Panel",
    "css" : "*panel-alerts",
    "url" : "http://styleguide.etradecreative.com/patterns/alert-panel.html"
  },
  "global-message":{
    "label" : "Global Message",
    "css" : "*global-message",
    "url" : "http://styleguide.etradecreative.com/components/alerts.html"
  },
  "tabs" : 
  {
    "label" : "Tabs",
    "css" : "*tabs",
    "url": "http://styleguide.etradecreative.com/navigation/tabs.html"
  },
  "stacked-tabs" : 
  {
    "label" : "Stacked Tabs",
    "css" : ".nav-stacked",
    "url": "http://styleguide.etradecreative.com/navigation/tabs.html#stacked-tabs"
  },
  "button": {
    "label" : "Button",
    "css" : "*btn",
    "url": "http://styleguide.etradecreative.com/elements/buttons.html"
  },
  "disabled-button": {
    "label" : "Disabled Button",
    "css" : ".btn [disabled='disabled']",
    "url": "http://styleguide.etradecreative.com/elements/buttons.html"
  },
  "hopper-nav":{
    "label" : "Hopper Navigation",
    "css" : "*hopper-nav",
    "url" : "http://styleguide.etradecreative.com/navigation/hopper-utility.html"
  },
  "utility-menu":{
    "label" : "Utility Menu",
    "css" : "*utility-menu",
    "url" : "http://styleguide.etradecreative.com/navigation/hopper-utility.html"
  },
  "pills":{
    "label" : "Nav Pills",
    "css" : "*pills",
    "url" : "http://styleguide.etradecreative.com/components/pills.html"
  },
  "table":{
    "label" : "Basic Table",
    "css" : "*table",
    "url" : "http://styleguide.etradecreative.com/components/table.html"
  },
  "page-refresh":{
    "label" : "Page Refresh",
    "css" : "*page-refresh",
    "url" : "http://styleguide.etradecreative.com/components/table.html"
  },
  "select":{
    "label" : "Select",
    "css" : "*et-select",
    "url" : "http://styleguide.etradecreative.com/select.html"
  }
};

var deprecated_library = {
  "global-message":{
    "label" : "Global Message",
    "css" : ".global-message",
    "url" : "http://styleguide.etradecreative.com/components/alerts.html"
  },
  "modal":{
    "label": "Modal",
    "css" : ".modal",
    "url": "http://styleguide.etradecreative.com/components/modals.html"
  },
  "filters" : 
  {
    "label" :"Filters",
    "css" : ".filters",
    "url": "http://styleguide.etradecreative.com/navigation/filters.html"
  },
  "tabs" : 
  {
    "label" : "Tabs",
    "css" : ".tabs",
    "url": "http://styleguide.etradecreative.com/navigation/major-tabs.html"
  },
  "button": {
    "label" : "Button",
    "css" : ".btn",
    "url": "http://styleguide.etradecreative.com/elements/buttons.html"
  },
  "primary-button": {
    "label" : "Primary Button",
    "css" : ".btn.btn-primary",
    "url": "http://styleguide.etradecreative.com/elements/buttons.html"
  },
  "btn-primary-disabled": {
    "label" : "Disabled Primary Button",
    "css" : ".btn.btn-primary [disabled]",
    "url": "http://styleguide.etradecreative.com/elements/buttons.html"
  },
  "table": {
    "label" : "Sortable Table",
    "css": "table.sortable",
    "url": "http://styleguide.etradecreative.com/components/tables.html"
  },
  "hopper-nav":{
    "label" : "Hopper Navigation",
    "css" : ".hopper-nav",
    "url" : "http://styleguide.etradecreative.com/navigation/hopper-utility.html"
  },
  "utility-menu":{
    "label" : "Utility Menu",
    "css" : ".utility-menu",
    "url" : "http://styleguide.etradecreative.com/navigation/hopper-utility.html"
  },
  "page-title":{
    "label" : "Page Title",
    "css" : ".page-title",
    "url" : "http://styleguide.etradecreative.com/typography.html"
  },
  "mini-chain":{
    "label" : "Options Mini Chain",
    "css" : ".mini-chain",
    "url" : "http://styleguide.etradecreative.com/options.html"
  },
  "et-select":{
    "label" : "Select Control",
    "css" : ".et-select",
    "url" : "http://styleguide.etradecreative.com/select.html"
  },
  "account-summary":{
    "label" : "Account Summary Pattern",
    "css" : ".account-summary",
    "url" : "http://styleguide.etradecreative.com/account-summary.html"
  },
  "page-refresh":{
    "label" : "Page Refresh",
    "css" : ".page-refresh",
    "url" : "http://styleguide.etradecreative.com/page-refresh.html"
  },
  "pills":{
    "label" : "Pills",
    "css" : ".pills",
    "url" : "http://styleguide.etradecreative.com/pills.html"
  },
  "disclaimer":{
    "label" : "Disclaimer",
    "css" : ".disclaimer",
    "url" : "http://styleguide.etradecreative.com/disclaimer.html"
  },
  "inputy":{
    "label" : "Text Input",
    "css" : "input type='text'",
    "url" : "http://styleguide.etradecreative.com/input.html"
  }
};

var templates = {
  'right-column-template' : {
    "label" : "Right Column Template",
    "url" : "http://styleguide.etradecreative.com/template-x"
  },
  'two-column-layout' : {
    "label" : "Two Column Layout",
    "url" : "http://styleguide.etradecreative.com/page-templates/two-column-layout"
  }
};

var config = {
  padding: 30
};

var yPos = 20;
var eNum = 1;

function typeOf(obj){
  print(toString.call(obj));
}

function inLibrary(name){
  //log(name);
  var obj = false;
  for(var key in library){
    if(key == name) {
      obj = library[key]; 
    }
  }
  return obj;
}

function inTemplates(name){
  //log(name);
  var obj = false;
  for(var key in templates){
    if(key == name) {
      obj = templates[key]; 
    }
  }
  return obj;
}

function makeTextLayer(group,layer,annotation){
  var textLayer = group.addLayerOfType('text');
      textLayer.frame().setY(layer.frame().y() - 42);
      textLayer.frame().setX(layer.frame().x() + 5);
      textLayer.setStringValue(annotation["label"] + '\n'+ annotation["url"]);
      textLayer.setName(annotation["label"]);
      textLayer.setFontSize(13);
      textLayer.setTextColor(MSColor.colorWithSVGString("#ffffff"));
      textLayer.adjustFrameToFit();
  return textLayer;
}

function makeText(text,size,color,group){
  var textLayer = group.addLayerOfType('text');
      textLayer.setStringValue(text);
      textLayer.setName(text);
      textLayer.setFontSize(size);
      textLayer.setTextColor(MSColor.colorWithSVGString(color));
      textLayer.adjustFrameToFit();
  return textLayer;
}

function makeDot(x,y,group){
  var dot = group.addLayerOfType('group');
  dot.setName('dot');
  var ovalShape = MSOvalShape.alloc().initWithFrame(NSMakeRect(x,y,30,30));
  var shapeGroup = MSShapeGroup.shapeWithPath(ovalShape)
  var fill = shapeGroup.style().fills().addNewStylePart();
      fill.color = MSColor.colorWithSVGString('#CB429F');

      dot.addLayers([shapeGroup]);

  var text = makeText(eNum.toString(),14,'#ffffff',dot);
      text.frame().setX(x);
      text.frame().setY(y + 5);
      text.frame().setWidth(30);
      text.frame().setHeight(30);
      text.setTextAlignment(2);

  return dot;
}

function bumpYPos(text,margin){
  yPos += text.frame().height() + margin;
}

function createContainer(artboard,group){
  
  var ay = artboard.frame().y();
  var ax = artboard.frame().x();
  var ah = artboard.frame().height();
  var aw = artboard.frame().width();

  artboard.frame().setWidth( artboard.frame().width() + 500 );

  var rect = group.addLayerOfType('rectangle');
      rect.frame().setY(0);
      rect.frame().setX(aw);
      rect.frame().setWidth(500);
      rect.frame().setHeight(ah);
  var fill = rect.style().fills().addNewStylePart();
      fill.color = MSColor.colorWithSVGString("#393B36");
  
  var label = makeText('E*TRADE\nDesign Language Annotations',24,'#666666',group);
      label.frame().setX(aw + config.padding);
      label.frame().setY(yPos);

  bumpYPos(label,5);

  var d = new Date();
  var months = ['January','February','March','April','May','June','July','August','September','October','November','December'];
  var day = d.getDate() < 9 ? '0' + d.getDate() : d.getDate();
  var dateText = months[d.getMonth()] + ' ' + day + ', '+ d.getFullYear();
  var author = makeText('Created: ' + dateText + ' by ' + NSUserName(), 12, '#666666',group);
      author.frame().setX(aw + config.padding);
      author.frame().setY(yPos);
  bumpYPos(author,15);

  /*
  
  
  var date = makeText('Created on: ' + dateText, 12, '#666666',group);
      date.frame().setX(aw + config.padding);
      date.frame().setY(yPos);
  bumpYPos(date,15);
  */

}

function render(artboard_width,layer,group){
  if(layer.class() == "MSLayerGroup" || layer.class() == "MSArtboardGroup"){
    renderGroup(artboard_width,layer,group);
  }else{
    renderLayer(artboard_width,layer,group);
  }
}

function renderGroup(artboard_width,layer,group){
  //log('group type :::: '+layer.class());
  renderLayer(artboard_width,layer,group);
  var layers = layer.layers();
  for(var i=0; i < layers.count(); i++){
    var l = layers.objectAtIndex(i);
    render(artboard_width,l,group);
  }
}

function renderLayer(artboard_width,layer,group){

  var annotation = inLibrary(layer.name());
  if(annotation) {

    var dot = makeDot(layer.frame().x(),layer.frame().y(),group);
    var alt = makeDot(artboard_width + config.padding, yPos, group);

    var txt = makeText(annotation.label,18,'#d6d6d6',group);
    txt.frame().setY(yPos);
    txt.frame().setX(artboard_width + config.padding + 42);
    bumpYPos(txt,5);

    txt = makeText(annotation.css,13,'#d6d6d6',group);
    txt.frame().setY(yPos);
    txt.frame().setX(artboard_width + config.padding + 42);
    bumpYPos(txt,5);

    txt = makeText(annotation.url,13,'#d6d6d6',group);
    txt.frame().setY(yPos);
    txt.frame().setX(artboard_width + config.padding + 42);
    
    bumpYPos(txt,15);
    eNum++;
  }
}

var onRun = function(context){

  var group;
  var doc = context.document;
  doc.currentPage().deselectAllLayers();

  //If we're using artboards, add to the current artboard
  if(doc.currentPage().artboards().count() > 0) {
    var currentArtboard = doc.currentPage().currentArtboard();
    var aw = currentArtboard.frame().width();
    group = currentArtboard.addLayerOfType('group');
    group.setName('ETrade Annotations');
    var container = createContainer(currentArtboard,group);

    var template = inTemplates(currentArtboard.name());
    if(template){
      var txt = makeText('Page Template',13,'#666666',group);
      txt.frame().setY(yPos);
      txt.frame().setX(aw + config.padding);
      bumpYPos(txt,5);

      txt = makeText(template.label,18,'#d6d6d6',group);
      txt.frame().setY(yPos);
      txt.frame().setX(aw + config.padding);
      bumpYPos(txt,5);

      txt = makeText(template.url,12,'#d6d6d6',group);
      txt.frame().setY(yPos);
      txt.frame().setX(aw + config.padding);

      bumpYPos(txt,32);
    }

    var txt = makeText('UI Components',13,'#666666',group);
      txt.frame().setY(yPos);
      txt.frame().setX(aw + config.padding);
      bumpYPos(txt,8);

    // Now, let’s iterate through all layers:
    var all_layers = doc.currentPage().currentArtboard();//.layers();
    render(aw,all_layers,group);

  }

};