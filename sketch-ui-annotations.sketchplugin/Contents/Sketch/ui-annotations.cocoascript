var library = {
  "global-message":{
    "label" : "Global Message",
    "css" : ".global-message",
    "url" : "bit.ly/1P3rvPa"
  },
  "modal":{
    "label": "Modal",
    "css" : ".global-message",
    "url": "bit.ly/1OdRJRN"
  },
  "filters" : 
  {
    "label" :"Filters"
  },
  "tabs" : 
  {
    "label" : "Tabs",
    "css" : ".global-message",
    "url": "bit.ly/1VZLFPW"
  },
  "button": {
    "label" : "Button",
    "url": "bit.ly/1SdAGTP"
  }
};

var templates = {
  'template-x' : {
    "label" : "Template X",
    "url" : "http://styleguide.etradecreative.com/url"
  }
};

var config = {
  padding: 20
};

var yPos = 20;
var eNum = 0;

function typeOf(obj) {
    print(toString.call(obj));
}

function inLibrary(name){
  var obj = false;
  for(var key in library){
    //log(typeOf(key) + ' vs ' + typeOf(name));
    if(key == name) {
      obj = library[key]; 
    }
  }
  return obj;
}

function inTemplates(name){
  var obj = false;
  for(var key in templates){
    if(key == name) {
      obj = templates[key]; 
    }
  }
  return obj;
}

function drawTopRect(textLayer){

  var ty = textLayer.frame().y() - 5;
  var tx = textLayer.frame().x() - 5;
  var tw = textLayer.frame().width() + 10;
  var th = textLayer.frame().height() + 10;

  var path = NSBezierPath.bezierPath();
  path.moveToPoint(NSMakePoint(tx,ty));
  path.lineToPoint(NSMakePoint(tx,ty + th));

  path.lineToPoint(NSMakePoint(tx + (tw / 2),ty + th));
  path.lineToPoint(NSMakePoint(tx + (tw / 2) + 8,ty + th + 8));
  path.lineToPoint(NSMakePoint(tx + (tw / 2) + 8,ty + th));

  path.lineToPoint(NSMakePoint(tx + tw,ty + th));
  path.lineToPoint(NSMakePoint(tx + tw,ty + th));
  path.lineToPoint(NSMakePoint(tx + tw,ty));

  path.closePath();

  var shape = MSShapeGroup.shapeWithBezierPath(path);
  var fill = shape.style().fills().addNewStylePart();
  fill.color = MSColor.colorWithSVGString("#4A90E2");
  return shape;
}

function makeTextLayer(group,layer,annotation){
  var textLayer = group.addLayerOfType('text');
      textLayer.frame().setY(layer.frame().y() - 42);
      textLayer.frame().setX(layer.frame().x() + 5);
      textLayer.setStringValue(annotation["label"] + '\n'+ annotation["url"]);
      textLayer.setName(annotation["label"]);
      textLayer.setFontSize(13);
      textLayer.setTextColor(MSColor.colorWithSVGString("#ffffff"));
      textLayer.adjustFrameToFit();
  return textLayer;
}

function makeText(text,size,color,group){
  var textLayer = group.addLayerOfType('text');
      textLayer.setStringValue(text);
      textLayer.setName(text);
      textLayer.setFontSize(size);
      textLayer.setTextColor(MSColor.colorWithSVGString(color));
      textLayer.adjustFrameToFit();
  return textLayer;
}

function makeDot(x,y,group){
  var dot = group.addLayerOfType('group');
  dot.setName('dot');
  var ovalShape = MSOvalShape.alloc().initWithFrame(NSMakeRect(x,y,30,30));
  var shapeGroup = MSShapeGroup.shapeWithPath(ovalShape)
  var fill = shapeGroup.style().fills().addNewStylePart();
      fill.color = MSColor.colorWithSVGString('#cc3300');

      dot.addLayers([shapeGroup]);

  var text = makeText(eNum.toString(),14,'#ffffff',dot);
      text.frame().setX(x);
      text.frame().setY(y + 5);
      text.frame().setWidth(30);
      text.frame().setHeight(30);
      text.setTextAlignment(2);

  return dot;
}

function bumpYPos(text,margin){
  yPos += text.frame().height() + margin;
}

function createContainer(artboard,group){
  
  var ay = artboard.frame().y();
  var ax = artboard.frame().x();
  var ah = artboard.frame().height();
  var aw = artboard.frame().width();

  artboard.frame().setWidth( artboard.frame().width() + 500 );

  var rect = group.addLayerOfType('rectangle');
      rect.frame().setY(ay);
      rect.frame().setX(aw);
      rect.frame().setWidth(500);
      rect.frame().setHeight(ah);
      var fill = rect.style().fills().addNewStylePart();
      fill.color = MSColor.colorWithSVGString("#393B36");
  
  var label = makeText('E*TRADE\nDesign Language Annotations',24,'#666666',group);
      label.frame().setX(aw + config.padding);
      label.frame().setY(yPos);

  bumpYPos(label,20);

}

var onRun = function(context){

  var group;
  var doc = context.document;
  doc.currentPage().deselectAllLayers();

  //If we're using artboards, add to the current artboard
  if(doc.currentPage().artboards().count() > 0) {
    var currentArtboard = doc.currentPage().currentArtboard();
    var aw = currentArtboard.frame().width();
    group = currentArtboard.addLayerOfType('group');
    group.setName('ETrade Annotations');
    var container = createContainer(currentArtboard,group);

    var template = inTemplates(currentArtboard.name());
    if(template){
      var txt = makeText('Page Template',13,'#666666',group);
      txt.frame().setY(yPos);
      txt.frame().setX(aw + config.padding);
      bumpYPos(txt,5);

      txt = makeText(template.label,18,'#d6d6d6',group);
      txt.frame().setY(yPos);
      txt.frame().setX(aw + config.padding);
      bumpYPos(txt,5);

      txt = makeText(template.url,12,'#d6d6d6',group);
      txt.frame().setY(yPos);
      txt.frame().setX(aw + config.padding);

      bumpYPos(txt,32);
    }

    // Now, letâ€™s iterate through all layers:
    var all_layers = doc.currentPage().currentArtboard().layers();
    for(var i=0; i < all_layers.count(); i++){
      var layer = all_layers.objectAtIndex(i);
      var annotation = inLibrary(layer.name());
      if(annotation) {

        var dot = makeDot(layer.frame().x(),layer.frame().y(),group);
        var alt = makeDot(aw + config.padding, yPos, group);

        var txt = makeText(annotation.label,18,'#d6d6d6',group);
        txt.frame().setY(yPos);
        txt.frame().setX(aw + config.padding + 42);
        bumpYPos(txt,5);

        txt = makeText(annotation.css,13,'#d6d6d6',group);
        txt.frame().setY(yPos);
        txt.frame().setX(aw + config.padding + 42);
        bumpYPos(txt,5);

        txt = makeText(annotation.url,13,'#d6d6d6',group);
        txt.frame().setY(yPos);
        txt.frame().setX(aw + config.padding + 42);
        //bumpYPos(txt,5);
        
        bumpYPos(txt,15);
        eNum++;
      }
    }

  }

};