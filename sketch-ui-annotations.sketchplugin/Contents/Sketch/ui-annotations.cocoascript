var library = {
  "global-message":{
    "label" : "Global Message",
    "url" : "bit.ly/1P3rvPa"
  },
  "modal":{
    "label": "Modal",
    "url": "bit.ly/1OdRJRN"
  },
  "filters" : 
  {
    "label" :"Filters"
  },
  "tabs" : 
  {
    "label" : "Tabs",
    "url": "bit.ly/1VZLFPW"
  },
  "button": {
    "label" : "Button",
    "url": "bit.ly/1SdAGTP"
  }
};

function typeOf(obj) {
    print(toString.call(obj));
}

function inLibrary(name){
  log('checking '+name);
  var obj = false;
  for(var key in library){
    //log(typeOf(key) + ' vs ' + typeOf(name));
    if(key == name) {
      obj = library[key]; 
    }
  }
  return obj;
}

function drawTopRect(textLayer){

  var ty = textLayer.frame().y() - 5;
  var tx = textLayer.frame().x() - 5;
  var tw = textLayer.frame().width() + 10;
  var th = textLayer.frame().height() + 10;

  var path = NSBezierPath.bezierPath();
  path.moveToPoint(NSMakePoint(tx,ty));
  path.lineToPoint(NSMakePoint(tx,ty + th));

  path.lineToPoint(NSMakePoint(tx + (tw / 2),ty + th));
  path.lineToPoint(NSMakePoint(tx + (tw / 2) + 8,ty + th + 8));
  path.lineToPoint(NSMakePoint(tx + (tw / 2) + 8,ty + th));

  path.lineToPoint(NSMakePoint(tx + tw,ty + th));
  path.lineToPoint(NSMakePoint(tx + tw,ty + th));
  path.lineToPoint(NSMakePoint(tx + tw,ty));

  path.closePath();

  var shape = MSShapeGroup.shapeWithBezierPath(path);
  var fill = shape.style().fills().addNewStylePart();
  fill.color = MSColor.colorWithSVGString("#4A90E2");
  return shape;
}

function makeTextLayer(group,layer,annotation){
  var textLayer = group.addLayerOfType('text');
      textLayer.frame().setY(layer.frame().y() - 42);
      textLayer.frame().setX(layer.frame().x() + 5);
      textLayer.setStringValue(annotation["label"] + '\n'+ annotation["url"]);
      textLayer.setName(annotation["label"]);
      textLayer.setFontSize(13);
      textLayer.setTextColor(MSColor.colorWithSVGString("#ffffff"));
      textLayer.adjustFrameToFit();
  return textLayer;
}

/*
var onRun = function(context){

  var group;
  var doc = context.document;
  doc.currentPage().deselectAllLayers();

  //If we're using artboards, add to the current artboard
  if(doc.currentPage().artboards().count() > 0) {
    var currentArtboard = doc.currentPage().currentArtboard();
    group = currentArtboard.addLayerOfType('group');
  } else {
    group = doc.currentPage().addLayerOfType('group');
  }
  group.setName('ETrade Annotations');

  // Now, let’s iterate through all layers:
  var all_layers = doc.currentPage().currentArtboard().layers();
  for(var i=0; i < all_layers.count(); i++){
    var layer = all_layers.objectAtIndex(i);
    var annotation = inLibrary(layer.name());
    if(annotation) {
      var textLayer = makeTextLayer(group,layer,annotation);
      shape = drawTopRect(textLayer);
      group.addLayers([shape]);
      group.removeLayer(textLayer);
      textLayer = makeTextLayer(group,layer,annotation);
      group.addLayers[textLayer];
    }
  }

};
*/

function createBackground(artboard){
  var rect = artboard.addLayerOfType('rectangle');
}

var onRun = function(context){

  var group;
  var doc = context.document;
  doc.currentPage().deselectAllLayers();

  //If we're using artboards, add to the current artboard
  if(doc.currentPage().artboards().count() > 0) {
    var currentArtboard = doc.currentPage().currentArtboard();
    group = currentArtboard.addLayerOfType('group');
  } else {
    group = doc.currentPage().addLayerOfType('group');
  }
  group.setName('ETrade Annotations');

  // Now, let’s iterate through all layers:
  var all_layers = doc.currentPage().currentArtboard().layers();
  for(var i=0; i < all_layers.count(); i++){
    var layer = all_layers.objectAtIndex(i);
    var annotation = inLibrary(layer.name());
    if(annotation) {
      var textLayer = makeTextLayer(group,layer,annotation);
      shape = drawTopRect(textLayer);
      group.addLayers([shape]);
      group.removeLayer(textLayer);
      textLayer = makeTextLayer(group,layer,annotation);
      group.addLayers[textLayer];
    }
  }

};